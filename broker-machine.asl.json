{
  "StartAt": "Save loan request",
  "States": {
    "Save loan request": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${DataTableName}",
        "Item": {
          "pk": {
            "S.$": "States.Format('LOAN#{}', $$.Execution.Name)"
          },
          "status": {
            "S": "STARTING"
          },
          "updatedAt": {
            "S.$": "$$.State.EnteredTime"
          },
          "createdAt": {
            "S.$": "$$.Execution.StartTime"
          }
        }
      },
      "ResultPath": null,
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 5,
          "MaxAttempts": 2,
          "BackoffRate": 1.5
        }
      ],
      "Next": "Artificial Delay"
    },

    "Artificial Delay": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Update status (consulting bureau)"
    },
    "Update status (consulting bureau)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${DataTableName}",
        "Key": {
          "pk": {
            "S.$": "States.Format('LOAN#{}', $$.Execution.Name)"
          }
        },
        "UpdateExpression": "SET #status = :newStatus",
        "ConditionExpression": "attribute_exists(#pk)",
        "ExpressionAttributeValues": {
          ":newStatus": "CONSULTING_BUREAU"
        },
        "ExpressionAttributeNames": {
          "#pk": "pk",
          "#status": "status"
        }
      },
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 5,
          "MaxAttempts": 2,
          "BackoffRate": 1.5
        }
      ],
      "ResultPath": null,
      "Next": "Consult Credit Bureau"
    },

    "Consult Credit Bureau": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CreditBureauFunctionName}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 5,
          "MaxAttempts": 2,
          "BackoffRate": 1.5
        }
      ],
      "Next": "Update status (getting quotes)",
      "ResultSelector": {
        "score.$": "$.Payload.score",
        "history.$": "$.Payload.history"
      },
      "ResultPath": "$.credit"
    },
    "Update status (getting quotes)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${DataTableName}",
        "Key": {
          "pk": {
            "S.$": "States.Format('LOAN#{}', $$.Execution.Name)"
          }
        },
        "UpdateExpression": "SET #status = :newStatus",
        "ConditionExpression": "attribute_exists(#pk)",
        "ExpressionAttributeValues": {
          ":newStatus": "GETTING_QUOTES"
        },
        "ExpressionAttributeNames": {
          "#pk": "pk",
          "#status": "status"
        }
      },
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 5,
          "MaxAttempts": 2,
          "BackoffRate": 1.5
        }
      ],
      "ResultPath": null,
      "Next": "Get bank names"
    },

    "Get bank names": {
      "Type": "Pass",
      "Parameters": {
        "bankName.$": "States.Array('Universal', 'PawnShop', 'Premium')"
      },
      "ResultPath": "$.banks",
      "Next": "Get quotes"
    },

    "Get quotes": {
      "Type": "Map",
      "ItemsPath": "$.banks.bankName",
      "ResultPath": "$.quotes",
      "Parameters": {
        "amount.$": "$.amount",
        "term.$": "$.term",
        "credit.$": "$.credit",
        "bankName.$": "$$.Map.Item.Value"
      },
      "Next": "Transform quotes",
      "Iterator": {
        "StartAt": "Get the bank",
        "States": {
          "Get the bank": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
              "TableName": "${DataTableName}",
              "Key": {
                "pk": {
                  "S.$": "States.Format('BANK#{}', $.bankName)"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": ["States.TaskFailed"],
                "IntervalSeconds": 5,
                "MaxAttempts": 2,
                "BackoffRate": 1.5
              }
            ],
            "ResultSelector": {
              "minCreditScore.$": "$.Item.minCreditScore.N",
              "baseRate.$": "$.Item.baseRate.N",
              "maxLoanAmount.$": "$.Item.maxLoanAmount.N"
            },
            "ResultPath": "$.bankInfo",
            "Next": "Calculate rate"
          },

          "Calculate rate": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${CalculateRateFunctionName}"
            },
            "ResultSelector": {
              "quote.$": "$.Payload"
            },
            "End": true
          }
        }
      }
    },

    "Transform quotes": {
      "Type": "Pass",
      "Parameters": {
        "quotes.$": "$.quotes[?(@.quote)].quote"
      },
      "ResultPath": "$",
      "Next": "Update status (save quotes)"
    },

    "Update status (save quotes)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${DataTableName}",
        "Key": {
          "pk": {
            "S.$": "States.Format('LOAN#{}', $$.Execution.Name)"
          }
        },
        "UpdateExpression": "SET #status = :newStatus, #quotes = :quotes",
        "ConditionExpression": "attribute_exists(#pk)",
        "ExpressionAttributeValues": {
          ":newStatus": {
            "S": "FINISHED"
          },
          ":quotes": {
            "S.$": "States.JsonToString($.quotes)"
          }
        },
        "ExpressionAttributeNames": {
          "#pk": "pk",
          "#status": "status",
          "#quotes": "quotes"
        }
      },
      "End": true
    }
  }
}
